// Code generated by MockGen. DO NOT EDIT.
// Source: config/config.go

// Package config is a generated GoMock package.
package config

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// GetGRPCServerOptions mocks base method.
func (m *MockConfig) GetGRPCServerOptions() []grpc.ServerOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGRPCServerOptions")
	ret0, _ := ret[0].([]grpc.ServerOption)
	return ret0
}

// GetGRPCServerOptions indicates an expected call of GetGRPCServerOptions.
func (mr *MockConfigMockRecorder) GetGRPCServerOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGRPCServerOptions", reflect.TypeOf((*MockConfig)(nil).GetGRPCServerOptions))
}

// GetInboundServerAddress mocks base method.
func (m *MockConfig) GetInboundServerAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInboundServerAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetInboundServerAddress indicates an expected call of GetInboundServerAddress.
func (mr *MockConfigMockRecorder) GetInboundServerAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInboundServerAddress", reflect.TypeOf((*MockConfig)(nil).GetInboundServerAddress))
}

// GetLocalServerRPCAddress mocks base method.
func (m *MockConfig) GetLocalServerRPCAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalServerRPCAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLocalServerRPCAddress indicates an expected call of GetLocalServerRPCAddress.
func (mr *MockConfigMockRecorder) GetLocalServerRPCAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalServerRPCAddress", reflect.TypeOf((*MockConfig)(nil).GetLocalServerRPCAddress))
}

// GetOutboundServerAddress mocks base method.
func (m *MockConfig) GetOutboundServerAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutboundServerAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOutboundServerAddress indicates an expected call of GetOutboundServerAddress.
func (mr *MockConfigMockRecorder) GetOutboundServerAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutboundServerAddress", reflect.TypeOf((*MockConfig)(nil).GetOutboundServerAddress))
}

// GetRemoteServerRPCAddress mocks base method.
func (m *MockConfig) GetRemoteServerRPCAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteServerRPCAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRemoteServerRPCAddress indicates an expected call of GetRemoteServerRPCAddress.
func (mr *MockConfigMockRecorder) GetRemoteServerRPCAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteServerRPCAddress", reflect.TypeOf((*MockConfig)(nil).GetRemoteServerRPCAddress))
}
