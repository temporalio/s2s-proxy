
// Code generated by cmd/tools/rpcwrappers. DO NOT EDIT.

package frontend

import (
	"context"
	"encoding/json"
	"fmt"	

	"go.temporal.io/api/workflowservice/v1"
	"google.golang.org/grpc"
)

func (c *lazyClient) CountWorkflowExecutions(
	ctx context.Context,
	request *workflowservice.CountWorkflowExecutionsRequest,
	opts ...grpc.CallOption,
) (*workflowservice.CountWorkflowExecutionsResponse, error) {
	var resp *workflowservice.CountWorkflowExecutionsResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.CountWorkflowExecutions(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.CountWorkflowExecutions, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) CreateSchedule(
	ctx context.Context,
	request *workflowservice.CreateScheduleRequest,
	opts ...grpc.CallOption,
) (*workflowservice.CreateScheduleResponse, error) {
	var resp *workflowservice.CreateScheduleResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.CreateSchedule(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.CreateSchedule, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) DeleteSchedule(
	ctx context.Context,
	request *workflowservice.DeleteScheduleRequest,
	opts ...grpc.CallOption,
) (*workflowservice.DeleteScheduleResponse, error) {
	var resp *workflowservice.DeleteScheduleResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.DeleteSchedule(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.DeleteSchedule, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) DeleteWorkflowExecution(
	ctx context.Context,
	request *workflowservice.DeleteWorkflowExecutionRequest,
	opts ...grpc.CallOption,
) (*workflowservice.DeleteWorkflowExecutionResponse, error) {
	var resp *workflowservice.DeleteWorkflowExecutionResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.DeleteWorkflowExecution(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.DeleteWorkflowExecution, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) DeprecateNamespace(
	ctx context.Context,
	request *workflowservice.DeprecateNamespaceRequest,
	opts ...grpc.CallOption,
) (*workflowservice.DeprecateNamespaceResponse, error) {
	var resp *workflowservice.DeprecateNamespaceResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.DeprecateNamespace(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.DeprecateNamespace, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) DescribeBatchOperation(
	ctx context.Context,
	request *workflowservice.DescribeBatchOperationRequest,
	opts ...grpc.CallOption,
) (*workflowservice.DescribeBatchOperationResponse, error) {
	var resp *workflowservice.DescribeBatchOperationResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.DescribeBatchOperation(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.DescribeBatchOperation, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) DescribeNamespace(
	ctx context.Context,
	request *workflowservice.DescribeNamespaceRequest,
	opts ...grpc.CallOption,
) (*workflowservice.DescribeNamespaceResponse, error) {
	var resp *workflowservice.DescribeNamespaceResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.DescribeNamespace(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.DescribeNamespace, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) DescribeSchedule(
	ctx context.Context,
	request *workflowservice.DescribeScheduleRequest,
	opts ...grpc.CallOption,
) (*workflowservice.DescribeScheduleResponse, error) {
	var resp *workflowservice.DescribeScheduleResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.DescribeSchedule(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.DescribeSchedule, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) DescribeTaskQueue(
	ctx context.Context,
	request *workflowservice.DescribeTaskQueueRequest,
	opts ...grpc.CallOption,
) (*workflowservice.DescribeTaskQueueResponse, error) {
	var resp *workflowservice.DescribeTaskQueueResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.DescribeTaskQueue(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.DescribeTaskQueue, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) DescribeWorkflowExecution(
	ctx context.Context,
	request *workflowservice.DescribeWorkflowExecutionRequest,
	opts ...grpc.CallOption,
) (*workflowservice.DescribeWorkflowExecutionResponse, error) {
	var resp *workflowservice.DescribeWorkflowExecutionResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.DescribeWorkflowExecution(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.DescribeWorkflowExecution, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) ExecuteMultiOperation(
	ctx context.Context,
	request *workflowservice.ExecuteMultiOperationRequest,
	opts ...grpc.CallOption,
) (*workflowservice.ExecuteMultiOperationResponse, error) {
	var resp *workflowservice.ExecuteMultiOperationResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.ExecuteMultiOperation(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.ExecuteMultiOperation, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) GetClusterInfo(
	ctx context.Context,
	request *workflowservice.GetClusterInfoRequest,
	opts ...grpc.CallOption,
) (*workflowservice.GetClusterInfoResponse, error) {
	var resp *workflowservice.GetClusterInfoResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.GetClusterInfo(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.GetClusterInfo, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) GetSearchAttributes(
	ctx context.Context,
	request *workflowservice.GetSearchAttributesRequest,
	opts ...grpc.CallOption,
) (*workflowservice.GetSearchAttributesResponse, error) {
	var resp *workflowservice.GetSearchAttributesResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.GetSearchAttributes(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.GetSearchAttributes, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) GetSystemInfo(
	ctx context.Context,
	request *workflowservice.GetSystemInfoRequest,
	opts ...grpc.CallOption,
) (*workflowservice.GetSystemInfoResponse, error) {
	var resp *workflowservice.GetSystemInfoResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.GetSystemInfo(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.GetSystemInfo, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) GetWorkerBuildIdCompatibility(
	ctx context.Context,
	request *workflowservice.GetWorkerBuildIdCompatibilityRequest,
	opts ...grpc.CallOption,
) (*workflowservice.GetWorkerBuildIdCompatibilityResponse, error) {
	var resp *workflowservice.GetWorkerBuildIdCompatibilityResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.GetWorkerBuildIdCompatibility(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.GetWorkerBuildIdCompatibility, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) GetWorkerTaskReachability(
	ctx context.Context,
	request *workflowservice.GetWorkerTaskReachabilityRequest,
	opts ...grpc.CallOption,
) (*workflowservice.GetWorkerTaskReachabilityResponse, error) {
	var resp *workflowservice.GetWorkerTaskReachabilityResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.GetWorkerTaskReachability(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.GetWorkerTaskReachability, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) GetWorkerVersioningRules(
	ctx context.Context,
	request *workflowservice.GetWorkerVersioningRulesRequest,
	opts ...grpc.CallOption,
) (*workflowservice.GetWorkerVersioningRulesResponse, error) {
	var resp *workflowservice.GetWorkerVersioningRulesResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.GetWorkerVersioningRules(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.GetWorkerVersioningRules, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) GetWorkflowExecutionHistory(
	ctx context.Context,
	request *workflowservice.GetWorkflowExecutionHistoryRequest,
	opts ...grpc.CallOption,
) (*workflowservice.GetWorkflowExecutionHistoryResponse, error) {
	var resp *workflowservice.GetWorkflowExecutionHistoryResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.GetWorkflowExecutionHistory(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.GetWorkflowExecutionHistory, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) GetWorkflowExecutionHistoryReverse(
	ctx context.Context,
	request *workflowservice.GetWorkflowExecutionHistoryReverseRequest,
	opts ...grpc.CallOption,
) (*workflowservice.GetWorkflowExecutionHistoryReverseResponse, error) {
	var resp *workflowservice.GetWorkflowExecutionHistoryReverseResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.GetWorkflowExecutionHistoryReverse(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.GetWorkflowExecutionHistoryReverse, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) ListArchivedWorkflowExecutions(
	ctx context.Context,
	request *workflowservice.ListArchivedWorkflowExecutionsRequest,
	opts ...grpc.CallOption,
) (*workflowservice.ListArchivedWorkflowExecutionsResponse, error) {
	var resp *workflowservice.ListArchivedWorkflowExecutionsResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.ListArchivedWorkflowExecutions(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.ListArchivedWorkflowExecutions, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) ListBatchOperations(
	ctx context.Context,
	request *workflowservice.ListBatchOperationsRequest,
	opts ...grpc.CallOption,
) (*workflowservice.ListBatchOperationsResponse, error) {
	var resp *workflowservice.ListBatchOperationsResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.ListBatchOperations(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.ListBatchOperations, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) ListClosedWorkflowExecutions(
	ctx context.Context,
	request *workflowservice.ListClosedWorkflowExecutionsRequest,
	opts ...grpc.CallOption,
) (*workflowservice.ListClosedWorkflowExecutionsResponse, error) {
	var resp *workflowservice.ListClosedWorkflowExecutionsResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.ListClosedWorkflowExecutions(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.ListClosedWorkflowExecutions, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) ListNamespaces(
	ctx context.Context,
	request *workflowservice.ListNamespacesRequest,
	opts ...grpc.CallOption,
) (*workflowservice.ListNamespacesResponse, error) {
	var resp *workflowservice.ListNamespacesResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.ListNamespaces(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.ListNamespaces, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) ListOpenWorkflowExecutions(
	ctx context.Context,
	request *workflowservice.ListOpenWorkflowExecutionsRequest,
	opts ...grpc.CallOption,
) (*workflowservice.ListOpenWorkflowExecutionsResponse, error) {
	var resp *workflowservice.ListOpenWorkflowExecutionsResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.ListOpenWorkflowExecutions(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.ListOpenWorkflowExecutions, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) ListScheduleMatchingTimes(
	ctx context.Context,
	request *workflowservice.ListScheduleMatchingTimesRequest,
	opts ...grpc.CallOption,
) (*workflowservice.ListScheduleMatchingTimesResponse, error) {
	var resp *workflowservice.ListScheduleMatchingTimesResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.ListScheduleMatchingTimes(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.ListScheduleMatchingTimes, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) ListSchedules(
	ctx context.Context,
	request *workflowservice.ListSchedulesRequest,
	opts ...grpc.CallOption,
) (*workflowservice.ListSchedulesResponse, error) {
	var resp *workflowservice.ListSchedulesResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.ListSchedules(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.ListSchedules, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) ListTaskQueuePartitions(
	ctx context.Context,
	request *workflowservice.ListTaskQueuePartitionsRequest,
	opts ...grpc.CallOption,
) (*workflowservice.ListTaskQueuePartitionsResponse, error) {
	var resp *workflowservice.ListTaskQueuePartitionsResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.ListTaskQueuePartitions(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.ListTaskQueuePartitions, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) ListWorkflowExecutions(
	ctx context.Context,
	request *workflowservice.ListWorkflowExecutionsRequest,
	opts ...grpc.CallOption,
) (*workflowservice.ListWorkflowExecutionsResponse, error) {
	var resp *workflowservice.ListWorkflowExecutionsResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.ListWorkflowExecutions(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.ListWorkflowExecutions, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) PatchSchedule(
	ctx context.Context,
	request *workflowservice.PatchScheduleRequest,
	opts ...grpc.CallOption,
) (*workflowservice.PatchScheduleResponse, error) {
	var resp *workflowservice.PatchScheduleResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.PatchSchedule(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.PatchSchedule, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) PollActivityTaskQueue(
	ctx context.Context,
	request *workflowservice.PollActivityTaskQueueRequest,
	opts ...grpc.CallOption,
) (*workflowservice.PollActivityTaskQueueResponse, error) {
	var resp *workflowservice.PollActivityTaskQueueResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.PollActivityTaskQueue(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.PollActivityTaskQueue, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) PollNexusTaskQueue(
	ctx context.Context,
	request *workflowservice.PollNexusTaskQueueRequest,
	opts ...grpc.CallOption,
) (*workflowservice.PollNexusTaskQueueResponse, error) {
	var resp *workflowservice.PollNexusTaskQueueResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.PollNexusTaskQueue(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.PollNexusTaskQueue, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) PollWorkflowExecutionUpdate(
	ctx context.Context,
	request *workflowservice.PollWorkflowExecutionUpdateRequest,
	opts ...grpc.CallOption,
) (*workflowservice.PollWorkflowExecutionUpdateResponse, error) {
	var resp *workflowservice.PollWorkflowExecutionUpdateResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.PollWorkflowExecutionUpdate(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.PollWorkflowExecutionUpdate, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) PollWorkflowTaskQueue(
	ctx context.Context,
	request *workflowservice.PollWorkflowTaskQueueRequest,
	opts ...grpc.CallOption,
) (*workflowservice.PollWorkflowTaskQueueResponse, error) {
	var resp *workflowservice.PollWorkflowTaskQueueResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.PollWorkflowTaskQueue(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.PollWorkflowTaskQueue, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) QueryWorkflow(
	ctx context.Context,
	request *workflowservice.QueryWorkflowRequest,
	opts ...grpc.CallOption,
) (*workflowservice.QueryWorkflowResponse, error) {
	var resp *workflowservice.QueryWorkflowResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.QueryWorkflow(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.QueryWorkflow, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) RecordActivityTaskHeartbeat(
	ctx context.Context,
	request *workflowservice.RecordActivityTaskHeartbeatRequest,
	opts ...grpc.CallOption,
) (*workflowservice.RecordActivityTaskHeartbeatResponse, error) {
	var resp *workflowservice.RecordActivityTaskHeartbeatResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.RecordActivityTaskHeartbeat(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.RecordActivityTaskHeartbeat, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) RecordActivityTaskHeartbeatById(
	ctx context.Context,
	request *workflowservice.RecordActivityTaskHeartbeatByIdRequest,
	opts ...grpc.CallOption,
) (*workflowservice.RecordActivityTaskHeartbeatByIdResponse, error) {
	var resp *workflowservice.RecordActivityTaskHeartbeatByIdResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.RecordActivityTaskHeartbeatById(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.RecordActivityTaskHeartbeatById, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) RegisterNamespace(
	ctx context.Context,
	request *workflowservice.RegisterNamespaceRequest,
	opts ...grpc.CallOption,
) (*workflowservice.RegisterNamespaceResponse, error) {
	var resp *workflowservice.RegisterNamespaceResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.RegisterNamespace(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.RegisterNamespace, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) RequestCancelWorkflowExecution(
	ctx context.Context,
	request *workflowservice.RequestCancelWorkflowExecutionRequest,
	opts ...grpc.CallOption,
) (*workflowservice.RequestCancelWorkflowExecutionResponse, error) {
	var resp *workflowservice.RequestCancelWorkflowExecutionResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.RequestCancelWorkflowExecution(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.RequestCancelWorkflowExecution, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) ResetStickyTaskQueue(
	ctx context.Context,
	request *workflowservice.ResetStickyTaskQueueRequest,
	opts ...grpc.CallOption,
) (*workflowservice.ResetStickyTaskQueueResponse, error) {
	var resp *workflowservice.ResetStickyTaskQueueResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.ResetStickyTaskQueue(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.ResetStickyTaskQueue, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) ResetWorkflowExecution(
	ctx context.Context,
	request *workflowservice.ResetWorkflowExecutionRequest,
	opts ...grpc.CallOption,
) (*workflowservice.ResetWorkflowExecutionResponse, error) {
	var resp *workflowservice.ResetWorkflowExecutionResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.ResetWorkflowExecution(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.ResetWorkflowExecution, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) RespondActivityTaskCanceled(
	ctx context.Context,
	request *workflowservice.RespondActivityTaskCanceledRequest,
	opts ...grpc.CallOption,
) (*workflowservice.RespondActivityTaskCanceledResponse, error) {
	var resp *workflowservice.RespondActivityTaskCanceledResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.RespondActivityTaskCanceled(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.RespondActivityTaskCanceled, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) RespondActivityTaskCanceledById(
	ctx context.Context,
	request *workflowservice.RespondActivityTaskCanceledByIdRequest,
	opts ...grpc.CallOption,
) (*workflowservice.RespondActivityTaskCanceledByIdResponse, error) {
	var resp *workflowservice.RespondActivityTaskCanceledByIdResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.RespondActivityTaskCanceledById(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.RespondActivityTaskCanceledById, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) RespondActivityTaskCompleted(
	ctx context.Context,
	request *workflowservice.RespondActivityTaskCompletedRequest,
	opts ...grpc.CallOption,
) (*workflowservice.RespondActivityTaskCompletedResponse, error) {
	var resp *workflowservice.RespondActivityTaskCompletedResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.RespondActivityTaskCompleted(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.RespondActivityTaskCompleted, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) RespondActivityTaskCompletedById(
	ctx context.Context,
	request *workflowservice.RespondActivityTaskCompletedByIdRequest,
	opts ...grpc.CallOption,
) (*workflowservice.RespondActivityTaskCompletedByIdResponse, error) {
	var resp *workflowservice.RespondActivityTaskCompletedByIdResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.RespondActivityTaskCompletedById(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.RespondActivityTaskCompletedById, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) RespondActivityTaskFailed(
	ctx context.Context,
	request *workflowservice.RespondActivityTaskFailedRequest,
	opts ...grpc.CallOption,
) (*workflowservice.RespondActivityTaskFailedResponse, error) {
	var resp *workflowservice.RespondActivityTaskFailedResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.RespondActivityTaskFailed(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.RespondActivityTaskFailed, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) RespondActivityTaskFailedById(
	ctx context.Context,
	request *workflowservice.RespondActivityTaskFailedByIdRequest,
	opts ...grpc.CallOption,
) (*workflowservice.RespondActivityTaskFailedByIdResponse, error) {
	var resp *workflowservice.RespondActivityTaskFailedByIdResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.RespondActivityTaskFailedById(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.RespondActivityTaskFailedById, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) RespondNexusTaskCompleted(
	ctx context.Context,
	request *workflowservice.RespondNexusTaskCompletedRequest,
	opts ...grpc.CallOption,
) (*workflowservice.RespondNexusTaskCompletedResponse, error) {
	var resp *workflowservice.RespondNexusTaskCompletedResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.RespondNexusTaskCompleted(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.RespondNexusTaskCompleted, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) RespondNexusTaskFailed(
	ctx context.Context,
	request *workflowservice.RespondNexusTaskFailedRequest,
	opts ...grpc.CallOption,
) (*workflowservice.RespondNexusTaskFailedResponse, error) {
	var resp *workflowservice.RespondNexusTaskFailedResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.RespondNexusTaskFailed(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.RespondNexusTaskFailed, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) RespondQueryTaskCompleted(
	ctx context.Context,
	request *workflowservice.RespondQueryTaskCompletedRequest,
	opts ...grpc.CallOption,
) (*workflowservice.RespondQueryTaskCompletedResponse, error) {
	var resp *workflowservice.RespondQueryTaskCompletedResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.RespondQueryTaskCompleted(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.RespondQueryTaskCompleted, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) RespondWorkflowTaskCompleted(
	ctx context.Context,
	request *workflowservice.RespondWorkflowTaskCompletedRequest,
	opts ...grpc.CallOption,
) (*workflowservice.RespondWorkflowTaskCompletedResponse, error) {
	var resp *workflowservice.RespondWorkflowTaskCompletedResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.RespondWorkflowTaskCompleted(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.RespondWorkflowTaskCompleted, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) RespondWorkflowTaskFailed(
	ctx context.Context,
	request *workflowservice.RespondWorkflowTaskFailedRequest,
	opts ...grpc.CallOption,
) (*workflowservice.RespondWorkflowTaskFailedResponse, error) {
	var resp *workflowservice.RespondWorkflowTaskFailedResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.RespondWorkflowTaskFailed(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.RespondWorkflowTaskFailed, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) ScanWorkflowExecutions(
	ctx context.Context,
	request *workflowservice.ScanWorkflowExecutionsRequest,
	opts ...grpc.CallOption,
) (*workflowservice.ScanWorkflowExecutionsResponse, error) {
	var resp *workflowservice.ScanWorkflowExecutionsResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.ScanWorkflowExecutions(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.ScanWorkflowExecutions, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) SignalWithStartWorkflowExecution(
	ctx context.Context,
	request *workflowservice.SignalWithStartWorkflowExecutionRequest,
	opts ...grpc.CallOption,
) (*workflowservice.SignalWithStartWorkflowExecutionResponse, error) {
	var resp *workflowservice.SignalWithStartWorkflowExecutionResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.SignalWithStartWorkflowExecution(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.SignalWithStartWorkflowExecution, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) SignalWorkflowExecution(
	ctx context.Context,
	request *workflowservice.SignalWorkflowExecutionRequest,
	opts ...grpc.CallOption,
) (*workflowservice.SignalWorkflowExecutionResponse, error) {
	var resp *workflowservice.SignalWorkflowExecutionResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.SignalWorkflowExecution(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.SignalWorkflowExecution, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) StartBatchOperation(
	ctx context.Context,
	request *workflowservice.StartBatchOperationRequest,
	opts ...grpc.CallOption,
) (*workflowservice.StartBatchOperationResponse, error) {
	var resp *workflowservice.StartBatchOperationResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.StartBatchOperation(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.StartBatchOperation, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) StartWorkflowExecution(
	ctx context.Context,
	request *workflowservice.StartWorkflowExecutionRequest,
	opts ...grpc.CallOption,
) (*workflowservice.StartWorkflowExecutionResponse, error) {
	var resp *workflowservice.StartWorkflowExecutionResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.StartWorkflowExecution(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.StartWorkflowExecution, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) StopBatchOperation(
	ctx context.Context,
	request *workflowservice.StopBatchOperationRequest,
	opts ...grpc.CallOption,
) (*workflowservice.StopBatchOperationResponse, error) {
	var resp *workflowservice.StopBatchOperationResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.StopBatchOperation(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.StopBatchOperation, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) TerminateWorkflowExecution(
	ctx context.Context,
	request *workflowservice.TerminateWorkflowExecutionRequest,
	opts ...grpc.CallOption,
) (*workflowservice.TerminateWorkflowExecutionResponse, error) {
	var resp *workflowservice.TerminateWorkflowExecutionResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.TerminateWorkflowExecution(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.TerminateWorkflowExecution, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) UpdateNamespace(
	ctx context.Context,
	request *workflowservice.UpdateNamespaceRequest,
	opts ...grpc.CallOption,
) (*workflowservice.UpdateNamespaceResponse, error) {
	var resp *workflowservice.UpdateNamespaceResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.UpdateNamespace(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.UpdateNamespace, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) UpdateSchedule(
	ctx context.Context,
	request *workflowservice.UpdateScheduleRequest,
	opts ...grpc.CallOption,
) (*workflowservice.UpdateScheduleResponse, error) {
	var resp *workflowservice.UpdateScheduleResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.UpdateSchedule(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.UpdateSchedule, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) UpdateWorkerBuildIdCompatibility(
	ctx context.Context,
	request *workflowservice.UpdateWorkerBuildIdCompatibilityRequest,
	opts ...grpc.CallOption,
) (*workflowservice.UpdateWorkerBuildIdCompatibilityResponse, error) {
	var resp *workflowservice.UpdateWorkerBuildIdCompatibilityResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.UpdateWorkerBuildIdCompatibility(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.UpdateWorkerBuildIdCompatibility, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) UpdateWorkerVersioningRules(
	ctx context.Context,
	request *workflowservice.UpdateWorkerVersioningRulesRequest,
	opts ...grpc.CallOption,
) (*workflowservice.UpdateWorkerVersioningRulesResponse, error) {
	var resp *workflowservice.UpdateWorkerVersioningRulesResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.UpdateWorkerVersioningRules(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.UpdateWorkerVersioningRules, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}

func (c *lazyClient) UpdateWorkflowExecution(
	ctx context.Context,
	request *workflowservice.UpdateWorkflowExecutionRequest,
	opts ...grpc.CallOption,
) (*workflowservice.UpdateWorkflowExecutionResponse, error) {
	var resp *workflowservice.UpdateWorkflowExecutionResponse
	client, err := c.clientProvider.GetWorkflowServiceClient()
	if err != nil {
		return resp, err
	}

	resp, err = client.UpdateWorkflowExecution(ctx, request, opts...)
	in, _ := json.Marshal(request)
	out, _ := json.Marshal(resp)
	c.logger.Info(fmt.Sprintf("frontend.UpdateWorkflowExecution, request: %v, resp: %v", string(in), string(out)))
	return resp, err
}
